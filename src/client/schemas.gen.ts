// This file is auto-generated by @hey-api/openapi-ts

export const $BaseProject = {
  type: 'object',
  required: ['name', 'version', 'description', 'equivalence_required', 'status_required'],
  properties: {
    name: {
      type: 'string'
    },
    version: {
      type: 'string'
    },
    description: {
      type: 'string'
    },
    equivalence_required: {
      type: 'boolean'
    },
    status_required: {
      type: 'boolean'
    }
  }
} as const

export const $UpdateProject = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseProject'
    },
    {
      type: 'object',
      required: ['id'],
      properties: {
        id: {
          type: 'integer',
          format: 'int32'
        }
      }
    }
  ]
} as const

export const $Project = {
  allOf: [
    {
      $ref: '#/components/schemas/UpdateProject'
    },
    {
      type: 'object',
      required: ['modified', 'created'],
      properties: {
        modified: {
          type: 'string'
        },
        created: {
          type: 'string'
        }
      }
    }
  ]
} as const

export const $CreateProjectDetails = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseProject'
    },
    {
      type: 'object',
      required: ['code_system_roles'],
      properties: {
        project_permissions: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/SendProjectPermission'
          }
        },
        code_system_roles: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/CreateCodeSystemRole'
          }
        }
      }
    }
  ]
} as const

export const $ProjectDetails = {
  allOf: [
    {
      $ref: '#/components/schemas/Project'
    },
    {
      type: 'object',
      required: ['code_system_roles'],
      properties: {
        project_permissions: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/ProjectPermission'
          }
        },
        code_system_roles: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/CodeSystemRole'
          }
        }
      }
    }
  ]
} as const

export const $SendProjectPermission = {
  type: 'object',
  required: ['user_id', 'role'],
  properties: {
    user_id: {
      type: 'string'
    },
    role: {
      type: 'string',
      enum: ['reviewer', 'project_owner', 'editor']
    }
  }
} as const

export const $ProjectPermission = {
  allOf: [
    {
      $ref: '#/components/schemas/SendProjectPermission'
    },
    {
      type: 'object',
      required: ['user_name'],
      properties: {
        user_name: {
          type: 'string'
        }
      }
    }
  ]
} as const

export const $CreateCodeSystemRole = {
  type: 'object',
  required: ['name', 'system', 'type'],
  properties: {
    name: {
      type: 'string'
    },
    system: {
      type: 'integer',
      format: 'int32'
    },
    type: {
      type: 'string',
      enum: ['source', 'target']
    }
  }
} as const

export const $UpdateCodeSystemRole = {
  type: 'object',
  required: ['id', 'name', 'type'],
  properties: {
    id: {
      type: 'integer',
      format: 'int32'
    },
    name: {
      type: 'string'
    },
    type: {
      type: 'string',
      enum: ['source', 'target']
    }
  }
} as const

export const $CodeSystemRole = {
  allOf: [
    {
      $ref: '#/components/schemas/UpdateCodeSystemRole'
    },
    {
      type: 'object',
      required: ['system'],
      properties: {
        system: {
          type: 'object',
          required: ['id', 'name', 'version'],
          properties: {
            id: {
              type: 'integer',
              format: 'int32'
            },
            name: {
              type: 'string'
            },
            version: {
              type: 'string'
            }
          }
        }
      }
    }
  ]
} as const

export const $CreateMapping = {
  type: 'object',
  properties: {
    equivalence: {
      type: 'string',
      enum: [
        'related-to',
        'equivalent',
        'source-is-narrower-than-target',
        'source-is-broader-than-target',
        'not-related'
      ]
    },
    status: {
      type: 'string',
      enum: ['active', 'inactive', 'pending']
    },
    comment: {
      type: 'string'
    },
    elements: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Element'
      }
    }
  }
} as const

export const $UpdateMapping = {
  allOf: [
    {
      $ref: '#/components/schemas/CreateMapping'
    },
    {
      type: 'object',
      required: ['id'],
      properties: {
        id: {
          type: 'integer',
          format: 'int64'
        }
      }
    }
  ]
} as const

export const $Mapping = {
  allOf: [
    {
      $ref: '#/components/schemas/UpdateMapping'
    },
    {
      type: 'object',
      required: ['modified', 'created', 'elements'],
      properties: {
        elements: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/FullElement'
          }
        },
        created: {
          type: 'string'
        },
        modified: {
          type: 'string'
        }
      }
    }
  ]
} as const

export const $Element = {
  properties: {
    codeSystemRole: {
      type: 'integer',
      format: 'int32'
    },
    concept: {
      type: 'integer',
      format: 'int64'
    }
  }
} as const

export const $FullElement = {
  allOf: [
    {
      $ref: '#/components/schemas/Element'
    },
    {
      type: 'object',
      properties: {
        concept: {
          $ref: '#/components/schemas/Concept'
        }
      }
    }
  ]
} as const

export const $Concept = {
  type: 'object',
  required: ['id', 'code', 'meaning'],
  properties: {
    id: {
      type: 'integer',
      format: 'int64'
    },
    code: {
      type: 'string'
    },
    meaning: {
      type: 'string'
    }
  }
} as const

export const $CreateCodeSystem = {
  type: 'object',
  required: ['uri', 'version', 'name'],
  properties: {
    uri: {
      type: 'string'
    },
    version: {
      type: 'string'
    },
    name: {
      type: 'string'
    },
    title: {
      type: 'string'
    },
    description: {
      type: 'string'
    },
    author: {
      type: 'string'
    }
  }
} as const

export const $CodeSystem = {
  allOf: [
    {
      $ref: '#/components/schemas/CreateCodeSystem'
    },
    {
      type: 'object',
      required: ['id'],
      properties: {
        id: {
          type: 'integer',
          format: 'int32'
        }
      }
    }
  ]
} as const

export const $ErrorResponse = {
  type: 'string'
} as const
