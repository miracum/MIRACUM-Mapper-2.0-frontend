// This file is auto-generated by @hey-api/openapi-ts

export type BaseProject = {
  name: string
  version: string
  description: string
  equivalence_required: boolean
  status_required: boolean
}

export type UpdateProject = BaseProject & {
  id: number
}

export type Project = UpdateProject & {
  modified: string
  created: string
}

export type CreateProjectDetails = BaseProject & {
  project_permissions?: Array<SendProjectPermission>
  code_system_roles: Array<CreateCodeSystemRole>
}

export type ProjectDetails = Project & {
  project_permissions?: Array<ProjectPermission>
  code_system_roles: Array<CodeSystemRole>
}

export type SendProjectPermission = {
  user_id: string
  role: 'reviewer' | 'project_owner' | 'editor'
}

export enum role {
  REVIEWER = 'reviewer',
  PROJECT_OWNER = 'project_owner',
  EDITOR = 'editor'
}

export type ProjectPermission = SendProjectPermission & {
  user_name: string
}

export type CreateCodeSystemRole = {
  name: string
  system: number
  type: 'source' | 'target'
}

export enum type {
  SOURCE = 'source',
  TARGET = 'target'
}

export type UpdateCodeSystemRole = {
  id: number
  name: string
  type: 'source' | 'target'
}

export type CodeSystemRole = UpdateCodeSystemRole & {
  system: {
    id: number
    name: string
    version: string
  }
}

export type CreateMapping = {
  equivalence?:
    | 'related-to'
    | 'equivalent'
    | 'source-is-narrower-than-target'
    | 'source-is-broader-than-target'
    | 'not-related'
  status?: 'active' | 'inactive' | 'pending'
  comment?: string
  elements?: Array<Element>
}

export enum equivalence {
  RELATED_TO = 'related-to',
  EQUIVALENT = 'equivalent',
  SOURCE_IS_NARROWER_THAN_TARGET = 'source-is-narrower-than-target',
  SOURCE_IS_BROADER_THAN_TARGET = 'source-is-broader-than-target',
  NOT_RELATED = 'not-related'
}

export enum status {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export type UpdateMapping = CreateMapping & {
  id: number
}

export type Mapping = UpdateMapping & {
  elements: Array<FullElement>
  created: string
  modified: string
}

export type Element = {
  codeSystemRole?: number
  concept?: number
}

export type FullElement = Element & {
  concept?: Concept
}

export type Concept = {
  id: number
  code: string
  meaning: string
}

export type CreateCodeSystem = {
  uri: string
  version: string
  name: string
  title?: string
  description?: string
  author?: string
}

export type CodeSystem = CreateCodeSystem & {
  id: number
}

export type ErrorResponse = string

/**
 * The ID of the project
 */
export type Parameterproject_id = number

/**
 * The ID of the user
 */
export type Parameteruser_id = string

/**
 * The ID of the code system role
 */
export type Parametercodesystem_role_id = number

/**
 * The ID of the mapping
 */
export type Parametermapping_id = number

/**
 * The ID of the Codesystem
 */
export type Parametercodesystem_id = number

/**
 * Page number (must be a positive integer)
 */
export type Parameterpage = number

/**
 * Number of items per page (minimum 1, maximum 100)
 */
export type ParameterpageSize = number

/**
 * Order of sorting (asc or desc)
 */
export enum ParametersortOrder {
  ASC = 'asc',
  DESC = 'desc'
}

export type PingResponse = {
  message?: string
}

export type GetAllProjectsData = {
  /**
   * Page number (must be a positive integer)
   */
  page?: number
  /**
   * Number of items per page (minimum 1, maximum 100)
   */
  pageSize?: number
  /**
   * Field to sort sortBy
   */
  sortBy?: 'name' | 'dateCreated' | 'id'
  /**
   * Order of sorting (asc or desc)
   */
  sortOrder?: 'asc' | 'desc'
}

export type GetAllProjectsResponse = Array<Project>

export type CreateProjectData = {
  requestBody: CreateProjectDetails
}

export type CreateProjectResponse = ProjectDetails

export type UpdateProjectData = {
  requestBody: UpdateProject
}

export type UpdateProjectResponse = Project

export type GetProjectData = {
  /**
   * The ID of the project
   */
  projectId: number
}

export type GetProjectResponse = ProjectDetails

export type DeleteProjectData = {
  /**
   * The ID of the project
   */
  projectId: number
}

export type DeleteProjectResponse = Project

export type GetAllPermissionsData = {
  /**
   * The ID of the project
   */
  projectId: number
}

export type GetAllPermissionsResponse = Array<ProjectPermission>

export type CreatePermissionData = {
  /**
   * The ID of the project
   */
  projectId: number
  requestBody: SendProjectPermission
}

export type CreatePermissionResponse = ProjectPermission

export type UpdatePermissionData = {
  /**
   * The ID of the project
   */
  projectId: number
  requestBody: SendProjectPermission
}

export type UpdatePermissionResponse = ProjectPermission

export type GetPermissionData = {
  /**
   * The ID of the project
   */
  projectId: number
  /**
   * The ID of the user
   */
  userId: string
}

export type GetPermissionResponse = ProjectPermission

export type DeletePermissionData = {
  /**
   * The ID of the project
   */
  projectId: number
  /**
   * The ID of the user
   */
  userId: string
}

export type DeletePermissionResponse = ProjectPermission

export type GetAllCodeSystemRolesData = {
  /**
   * The ID of the project
   */
  projectId: number
}

export type GetAllCodeSystemRolesResponse = Array<CodeSystemRole>

export type UpdateCodeSystemRoleData = {
  /**
   * The ID of the project
   */
  projectId: number
  requestBody: UpdateCodeSystemRole
}

export type UpdateCodeSystemRoleResponse = CodeSystemRole

export type GetCodeSystemRoleData = {
  /**
   * The ID of the code system role
   */
  codesystemRoleId: number
  /**
   * The ID of the project
   */
  projectId: number
}

export type GetCodeSystemRoleResponse = CodeSystemRole

export type GetAllMappingsData = {
  /**
   * Page number (must be a positive integer)
   */
  page?: number
  /**
   * Number of items per page (minimum 1, maximum 100)
   */
  pageSize?: number
  /**
   * The ID of the project
   */
  projectId: number
  /**
   * Field to sort by
   */
  sortBy?: 'id' | 'equivalence' | 'status' | 'comment' | 'created' | 'modified'
  /**
   * Order of sorting (asc or desc)
   */
  sortOrder?: 'asc' | 'desc'
}

export type GetAllMappingsResponse = Array<Mapping>

export type CreateMappingData = {
  /**
   * The ID of the project
   */
  projectId: number
  requestBody: CreateMapping
}

export type CreateMappingResponse = Mapping

export type UpdateMappingData = {
  /**
   * The ID of the project
   */
  projectId: number
  requestBody: UpdateMapping
}

export type UpdateMappingResponse = Mapping

export type PatchMappingData = {
  /**
   * The ID of the project
   */
  projectId: number
  requestBody: UpdateMapping
}

export type PatchMappingResponse = Mapping

export type GetMappingData = {
  /**
   * The ID of the mapping
   */
  mappingId: number
  /**
   * The ID of the project
   */
  projectId: number
}

export type GetMappingResponse = Mapping

export type DeleteMappingData = {
  /**
   * The ID of the mapping
   */
  mappingId: number
  /**
   * The ID of the project
   */
  projectId: number
}

export type DeleteMappingResponse = Mapping

export type GetAllCodeSystemsResponse = Array<CodeSystem>

export type CreateCodeSystemData = {
  requestBody: CreateCodeSystem
}

export type CreateCodeSystemResponse = CodeSystem

export type UpdateCodeSystemData = {
  requestBody: CodeSystem
}

export type UpdateCodeSystemResponse = CodeSystem

export type GetCodeSystemData = {
  /**
   * The ID of the Codesystem
   */
  codesystemId: number
}

export type GetCodeSystemResponse = CodeSystem

export type DeleteCodeSystemData = {
  /**
   * The ID of the Codesystem
   */
  codesystemId: number
}

export type DeleteCodeSystemResponse = CodeSystem

export type GetAllConceptsData = {
  /**
   * search for the code
   */
  codeSearch?: string
  /**
   * The ID of the Codesystem
   */
  codesystemId: number
  /**
   * search for meaning
   */
  meaningSearch?: string
  /**
   * Page number (must be a positive integer)
   */
  page?: number
  /**
   * Number of items per page (minimum 1, maximum 100)
   */
  pageSize?: number
  /**
   * Field to sort sortBy
   */
  sortBy?: 'code' | 'meaning'
  /**
   * Order of sorting (asc or desc)
   */
  sortOrder?: 'asc' | 'desc'
}

export type GetAllConceptsResponse = Array<Concept>

export type $OpenApiTs = {
  '/ping': {
    get: {
      res: {
        /**
         * Success
         */
        200: {
          message?: string
        }
      }
    }
  }
  '/projects': {
    get: {
      req: GetAllProjectsData
      res: {
        /**
         * Successful operation
         */
        200: Array<Project>
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Page not found (e.g., page number too high)
         */
        404: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
    post: {
      req: CreateProjectData
      res: {
        /**
         * Success
         */
        200: ProjectDetails
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Validation Exception
         */
        422: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
    put: {
      req: UpdateProjectData
      res: {
        /**
         * Success
         */
        200: Project
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project not found
         */
        404: ErrorResponse
        /**
         * Validation Exception
         */
        422: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
  }
  '/projects/{project_id}': {
    get: {
      req: GetProjectData
      res: {
        /**
         * Success
         */
        200: ProjectDetails
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project not found
         */
        404: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
    delete: {
      req: DeleteProjectData
      res: {
        /**
         * Success
         */
        200: Project
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project not found
         */
        404: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
  }
  '/projects/{project_id}/permissions': {
    get: {
      req: GetAllPermissionsData
      res: {
        /**
         * Success
         */
        200: Array<ProjectPermission>
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project not found
         */
        404: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
    post: {
      req: CreatePermissionData
      res: {
        /**
         * Success
         */
        200: ProjectPermission
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project or user not found
         */
        404: ErrorResponse
        /**
         * Validation Exception
         */
        422: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
    put: {
      req: UpdatePermissionData
      res: {
        /**
         * Success
         */
        200: ProjectPermission
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project or user not found
         */
        404: ErrorResponse
        /**
         * Validation Exception
         */
        422: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
  }
  '/projects/{project_id}/permissions/{user_id}': {
    get: {
      req: GetPermissionData
      res: {
        /**
         * Success
         */
        200: ProjectPermission
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project or user not found
         */
        404: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
    delete: {
      req: DeletePermissionData
      res: {
        /**
         * Success
         */
        200: ProjectPermission
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project or user not found
         */
        404: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
  }
  '/projects/{project_id}/codesystem-roles': {
    get: {
      req: GetAllCodeSystemRolesData
      res: {
        /**
         * Success
         */
        200: Array<CodeSystemRole>
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project not found
         */
        404: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
    put: {
      req: UpdateCodeSystemRoleData
      res: {
        /**
         * Success
         */
        200: CodeSystemRole
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project or codesystem-role not found
         */
        404: ErrorResponse
        /**
         * Validation Error
         */
        422: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
  }
  '/projects/{project_id}/codesystem-roles/{codesystem-role_id}': {
    get: {
      req: GetCodeSystemRoleData
      res: {
        /**
         * Success
         */
        200: CodeSystemRole
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project or codesystem-role not found
         */
        404: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
  }
  '/projects/{project_id}/mappings': {
    get: {
      req: GetAllMappingsData
      res: {
        /**
         * Success
         */
        200: Array<Mapping>
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Page not found (e.g., page number too high)
         */
        404: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
    post: {
      req: CreateMappingData
      res: {
        /**
         * Success
         */
        200: Mapping
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project not found
         */
        404: ErrorResponse
        /**
         * Validation Exception
         */
        422: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
    put: {
      req: UpdateMappingData
      res: {
        /**
         * Success
         */
        200: Mapping
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project or Mapping not found
         */
        404: ErrorResponse
        /**
         * Validation Error
         */
        422: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
    patch: {
      req: PatchMappingData
      res: {
        /**
         * Success
         */
        200: Mapping
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project or Mapping not found
         */
        404: ErrorResponse
        /**
         * Validation Error
         */
        422: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
  }
  '/projects/{project_id}/mappings/{mapping_id}': {
    get: {
      req: GetMappingData
      res: {
        /**
         * Success
         */
        200: Mapping
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project or Mapping not found
         */
        404: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
    delete: {
      req: DeleteMappingData
      res: {
        /**
         * Success
         */
        200: Mapping
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project or Mapping not found
         */
        404: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
  }
  '/codesystems': {
    get: {
      res: {
        /**
         * Success
         */
        200: Array<CodeSystem>
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Project or codesystem-role not found
         */
        404: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
    post: {
      req: CreateCodeSystemData
      res: {
        /**
         * Success
         */
        200: CodeSystem
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * CodeSystem not found
         */
        404: ErrorResponse
        /**
         * Validation Exception
         */
        422: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
    put: {
      req: UpdateCodeSystemData
      res: {
        /**
         * Success
         */
        200: CodeSystem
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Codesystem not found
         */
        404: ErrorResponse
        /**
         * Validation Error
         */
        422: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
  }
  '/codesystems/{codesystem_id}': {
    get: {
      req: GetCodeSystemData
      res: {
        /**
         * Success
         */
        200: CodeSystem
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * CodeSystem not found
         */
        404: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
    delete: {
      req: DeleteCodeSystemData
      res: {
        /**
         * Success
         */
        200: CodeSystem
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * Codesystem not found
         */
        404: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
  }
  '/codesystems/{codesystem_id}/concepts': {
    get: {
      req: GetAllConceptsData
      res: {
        /**
         * Success
         */
        200: Array<Concept>
        /**
         * Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
         */
        400: string
        /**
         * CodeSystem not found
         */
        404: ErrorResponse
        /**
         * Internal Server Error due to database or implementation errors
         */
        500: string
      }
    }
  }
}
