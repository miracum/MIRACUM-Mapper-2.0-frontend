// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise'
import { OpenAPI } from './core/OpenAPI'
import { request as __request } from './core/request'
import type {
  PingResponse,
  GetAllProjectsData,
  GetAllProjectsResponse,
  CreateProjectData,
  CreateProjectResponse,
  UpdateProjectData,
  UpdateProjectResponse,
  GetProjectData,
  GetProjectResponse,
  DeleteProjectData,
  DeleteProjectResponse,
  GetAllPermissionsData,
  GetAllPermissionsResponse,
  CreatePermissionData,
  CreatePermissionResponse,
  UpdatePermissionData,
  UpdatePermissionResponse,
  GetPermissionData,
  GetPermissionResponse,
  DeletePermissionData,
  DeletePermissionResponse,
  GetAllCodeSystemRolesData,
  GetAllCodeSystemRolesResponse,
  UpdateCodeSystemRoleData,
  UpdateCodeSystemRoleResponse,
  GetCodeSystemRoleData,
  GetCodeSystemRoleResponse,
  GetAllMappingsData,
  GetAllMappingsResponse,
  CreateMappingData,
  CreateMappingResponse,
  UpdateMappingData,
  UpdateMappingResponse,
  PatchMappingData,
  PatchMappingResponse,
  GetMappingData,
  GetMappingResponse,
  DeleteMappingData,
  DeleteMappingResponse,
  GetAllCodeSystemsResponse,
  CreateCodeSystemData,
  CreateCodeSystemResponse,
  UpdateCodeSystemData,
  UpdateCodeSystemResponse,
  GetCodeSystemData,
  GetCodeSystemResponse,
  DeleteCodeSystemData,
  DeleteCodeSystemResponse,
  GetAllConceptsData,
  GetAllConceptsResponse
} from './types.gen'

/**
 * Check if the server is running
 * This endpoint can be used to check if the server is running. It returns a simple pong message.
 * @returns unknown Success
 * @throws ApiError
 */
export const ping = (): CancelablePromise<PingResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/ping'
  })
}

/**
 * Get all projects
 * Get all projects with pagination. Sorting can also be specified by query parameters.
 * @param data The data for the request.
 * @param data.page Page number (must be a positive integer)
 * @param data.pageSize Number of items per page (minimum 1, maximum 100)
 * @param data.sortBy Field to sort sortBy
 * @param data.sortOrder Order of sorting (asc or desc)
 * @returns Project Successful operation
 * @throws ApiError
 */
export const getAllProjects = (
  data: GetAllProjectsData = {}
): CancelablePromise<GetAllProjectsResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/projects',
    query: {
      page: data.page,
      pageSize: data.pageSize,
      sortBy: data.sortBy,
      sortOrder: data.sortOrder
    },
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Page not found (e.g., page number too high)',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Create a new project
 * Create a new project with permissions and code system roles (the columns in the mapping table). Code system roles can not be changed after creation.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ProjectDetails Success
 * @throws ApiError
 */
export const createProject = (
  data: CreateProjectData
): CancelablePromise<CreateProjectResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/projects',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      422: 'Validation Exception',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Update the project information
 * Update the project information. Does not update the permissions for the users or the code system roles (the columns in the mapping table).
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Project Success
 * @throws ApiError
 */
export const updateProject = (
  data: UpdateProjectData
): CancelablePromise<UpdateProjectResponse> => {
  return __request(OpenAPI, {
    method: 'PUT',
    url: '/projects',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project not found',
      422: 'Validation Exception',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Get project details
 * Get the project details by ID including the list of project permissions and code system roles (the columns in the mapping table)
 * @param data The data for the request.
 * @param data.projectId The ID of the project
 * @returns ProjectDetails Success
 * @throws ApiError
 */
export const getProject = (data: GetProjectData): CancelablePromise<GetProjectResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/projects/{project_id}',
    path: {
      project_id: data.projectId
    },
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project not found',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Delete a project
 * Delete a project by ID. This will also delete all mappings and elements of the project as well as the permissions for the project and the code system roles.
 * @param data The data for the request.
 * @param data.projectId The ID of the project
 * @returns Project Success
 * @throws ApiError
 */
export const deleteProject = (
  data: DeleteProjectData
): CancelablePromise<DeleteProjectResponse> => {
  return __request(OpenAPI, {
    method: 'DELETE',
    url: '/projects/{project_id}',
    path: {
      project_id: data.projectId
    },
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project not found',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Get permissions for a project
 * Get all permissions for a project by project ID.
 * @param data The data for the request.
 * @param data.projectId The ID of the project
 * @returns ProjectPermission Success
 * @throws ApiError
 */
export const getAllPermissions = (
  data: GetAllPermissionsData
): CancelablePromise<GetAllPermissionsResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/projects/{project_id}/permissions',
    path: {
      project_id: data.projectId
    },
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project not found',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Create a new project permission for user
 * Create a new project permission for a user by the user ID.
 * @param data The data for the request.
 * @param data.projectId The ID of the project
 * @param data.requestBody
 * @returns ProjectPermission Success
 * @throws ApiError
 */
export const createPermission = (
  data: CreatePermissionData
): CancelablePromise<CreatePermissionResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/projects/{project_id}/permissions',
    path: {
      project_id: data.projectId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project or user not found',
      422: 'Validation Exception',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Update a project permission for a user
 * Update a project permission for a user by the user ID
 * @param data The data for the request.
 * @param data.projectId The ID of the project
 * @param data.requestBody
 * @returns ProjectPermission Success
 * @throws ApiError
 */
export const updatePermission = (
  data: UpdatePermissionData
): CancelablePromise<UpdatePermissionResponse> => {
  return __request(OpenAPI, {
    method: 'PUT',
    url: '/projects/{project_id}/permissions',
    path: {
      project_id: data.projectId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project or user not found',
      422: 'Validation Exception',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Get project permission for a specific user
 * Get the project permission for a specific user by the user ID.
 * @param data The data for the request.
 * @param data.projectId The ID of the project
 * @param data.userId The ID of the user
 * @returns ProjectPermission Success
 * @throws ApiError
 */
export const getPermission = (
  data: GetPermissionData
): CancelablePromise<GetPermissionResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/projects/{project_id}/permissions/{user_id}',
    path: {
      project_id: data.projectId,
      user_id: data.userId
    },
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project or user not found',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Delete a project permission for a user
 * Delete a project permission for a user by the user ID
 * @param data The data for the request.
 * @param data.projectId The ID of the project
 * @param data.userId The ID of the user
 * @returns ProjectPermission Success
 * @throws ApiError
 */
export const deletePermission = (
  data: DeletePermissionData
): CancelablePromise<DeletePermissionResponse> => {
  return __request(OpenAPI, {
    method: 'DELETE',
    url: '/projects/{project_id}/permissions/{user_id}',
    path: {
      project_id: data.projectId,
      user_id: data.userId
    },
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project or user not found',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Get all code system roles for a project
 * Get all code system roles (columns in the mapping table) for a project by project ID
 * @param data The data for the request.
 * @param data.projectId The ID of the project
 * @returns CodeSystemRole Success
 * @throws ApiError
 */
export const getAllCodeSystemRoles = (
  data: GetAllCodeSystemRolesData
): CancelablePromise<GetAllCodeSystemRolesResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/projects/{project_id}/codesystem-roles',
    path: {
      project_id: data.projectId
    },
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project not found',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Update a code system role by ID
 * Update name or type from a code system role (column in the mapping table) by ID
 * @param data The data for the request.
 * @param data.projectId The ID of the project
 * @param data.requestBody
 * @returns CodeSystemRole Success
 * @throws ApiError
 */
export const updateCodeSystemRole = (
  data: UpdateCodeSystemRoleData
): CancelablePromise<UpdateCodeSystemRoleResponse> => {
  return __request(OpenAPI, {
    method: 'PUT',
    url: '/projects/{project_id}/codesystem-roles',
    path: {
      project_id: data.projectId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project or codesystem-role not found',
      422: 'Validation Error',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Get a code system role by ID
 * Get a code system role (column in the mapping table) by ID
 * @param data The data for the request.
 * @param data.projectId The ID of the project
 * @param data.codesystemRoleId The ID of the code system role
 * @returns CodeSystemRole Success
 * @throws ApiError
 */
export const getCodeSystemRole = (
  data: GetCodeSystemRoleData
): CancelablePromise<GetCodeSystemRoleResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/projects/{project_id}/codesystem-roles/{codesystem-role_id}',
    path: {
      project_id: data.projectId,
      'codesystem-role_id': data.codesystemRoleId
    },
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project or codesystem-role not found',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Get all mappings for a project by project ID
 * Get all mappings for a project by project ID. The mappings include all elements with concepts. Paging and sorting can be specified by query parameters.
 * @param data The data for the request.
 * @param data.projectId The ID of the project
 * @param data.page Page number (must be a positive integer)
 * @param data.pageSize Number of items per page (minimum 1, maximum 100)
 * @param data.sortBy Field to sort by
 * @param data.sortOrder Order of sorting (asc or desc)
 * @returns Mapping Success
 * @throws ApiError
 */
export const getAllMappings = (
  data: GetAllMappingsData
): CancelablePromise<GetAllMappingsResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/projects/{project_id}/mappings',
    path: {
      project_id: data.projectId
    },
    query: {
      page: data.page,
      pageSize: data.pageSize,
      sortBy: data.sortBy,
      sortOrder: data.sortOrder
    },
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Page not found (e.g., page number too high)',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Create a new mapping for a project
 * Create a new mapping for a project by project ID including all needed elements (specified by code_system_roles from the corresponding project)
 * @param data The data for the request.
 * @param data.projectId The ID of the project
 * @param data.requestBody
 * @returns Mapping Success
 * @throws ApiError
 */
export const createMapping = (
  data: CreateMappingData
): CancelablePromise<CreateMappingResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/projects/{project_id}/mappings',
    path: {
      project_id: data.projectId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project not found',
      422: 'Validation Exception',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Update a mapping and its elements by their concept IDs
 * Update a mapping by ID and all included elements by using the corresponding concept IDs.
 * @param data The data for the request.
 * @param data.projectId The ID of the project
 * @param data.requestBody
 * @returns Mapping Success
 * @throws ApiError
 */
export const updateMapping = (
  data: UpdateMappingData
): CancelablePromise<UpdateMappingResponse> => {
  return __request(OpenAPI, {
    method: 'PUT',
    url: '/projects/{project_id}/mappings',
    path: {
      project_id: data.projectId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project or Mapping not found',
      422: 'Validation Error',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Update a mapping and its elements by their concept IDs
 * Update a mapping by ID and all included elements by using the corresponding concept IDs. Missing elements are deleted.
 * @param data The data for the request.
 * @param data.projectId The ID of the project
 * @param data.requestBody
 * @returns Mapping Success
 * @throws ApiError
 */
export const patchMapping = (data: PatchMappingData): CancelablePromise<PatchMappingResponse> => {
  return __request(OpenAPI, {
    method: 'PATCH',
    url: '/projects/{project_id}/mappings',
    path: {
      project_id: data.projectId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project or Mapping not found',
      422: 'Validation Error',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Get a mapping with its elements by ID
 * Get a mapping by ID and all included elements. The elements include the concept with the system-id.
 * @param data The data for the request.
 * @param data.projectId The ID of the project
 * @param data.mappingId The ID of the mapping
 * @returns Mapping Success
 * @throws ApiError
 */
export const getMapping = (data: GetMappingData): CancelablePromise<GetMappingResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/projects/{project_id}/mappings/{mapping_id}',
    path: {
      project_id: data.projectId,
      mapping_id: data.mappingId
    },
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project or Mapping not found',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Delete a mapping and its elements by ID
 * Delete a mapping by ID and all included elements.
 * @param data The data for the request.
 * @param data.projectId The ID of the project
 * @param data.mappingId The ID of the mapping
 * @returns Mapping Success
 * @throws ApiError
 */
export const deleteMapping = (
  data: DeleteMappingData
): CancelablePromise<DeleteMappingResponse> => {
  return __request(OpenAPI, {
    method: 'DELETE',
    url: '/projects/{project_id}/mappings/{mapping_id}',
    path: {
      project_id: data.projectId,
      mapping_id: data.mappingId
    },
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project or Mapping not found',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Get all code systems
 * Get all code systems.
 * @returns CodeSystem Success
 * @throws ApiError
 */
export const getAllCodeSystems = (): CancelablePromise<GetAllCodeSystemsResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/codesystems',
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Project or codesystem-role not found',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Create a new code system
 * Create a new code system. Only admins can create code systems.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns CodeSystem Success
 * @throws ApiError
 */
export const createCodeSystem = (
  data: CreateCodeSystemData
): CancelablePromise<CreateCodeSystemResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/codesystems',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'CodeSystem not found',
      422: 'Validation Exception',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Update a code system by ID
 * Update a code system by ID. Only admins can update code systems.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns CodeSystem Success
 * @throws ApiError
 */
export const updateCodeSystem = (
  data: UpdateCodeSystemData
): CancelablePromise<UpdateCodeSystemResponse> => {
  return __request(OpenAPI, {
    method: 'PUT',
    url: '/codesystems',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Codesystem not found',
      422: 'Validation Error',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Get a code system by ID
 * Get a code system by ID.
 * @param data The data for the request.
 * @param data.codesystemId The ID of the Codesystem
 * @returns CodeSystem Success
 * @throws ApiError
 */
export const getCodeSystem = (
  data: GetCodeSystemData
): CancelablePromise<GetCodeSystemResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/codesystems/{codesystem_id}',
    path: {
      codesystem_id: data.codesystemId
    },
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'CodeSystem not found',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Delete a code system by ID
 * Delete a code system by ID. Only admins can delete code systems.
 * @param data The data for the request.
 * @param data.codesystemId The ID of the Codesystem
 * @returns CodeSystem Success
 * @throws ApiError
 */
export const deleteCodeSystem = (
  data: DeleteCodeSystemData
): CancelablePromise<DeleteCodeSystemResponse> => {
  return __request(OpenAPI, {
    method: 'DELETE',
    url: '/codesystems/{codesystem_id}',
    path: {
      codesystem_id: data.codesystemId
    },
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'Codesystem not found',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}

/**
 * Get all concepts for a code system by ID
 * Get all concepts for a code system by ID. Paging and sorting can be specified by query parameters.
 * @param data The data for the request.
 * @param data.codesystemId The ID of the Codesystem
 * @param data.page Page number (must be a positive integer)
 * @param data.pageSize Number of items per page (minimum 1, maximum 100)
 * @param data.sortBy Field to sort sortBy
 * @param data.sortOrder Order of sorting (asc or desc)
 * @param data.codeSearch search for the code
 * @param data.meaningSearch search for meaning
 * @returns Concept Success
 * @throws ApiError
 */
export const getAllConcepts = (
  data: GetAllConceptsData
): CancelablePromise<GetAllConceptsResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/codesystems/{codesystem_id}/concepts',
    path: {
      codesystem_id: data.codesystemId
    },
    query: {
      page: data.page,
      pageSize: data.pageSize,
      sortBy: data.sortBy,
      sortOrder: data.sortOrder,
      codeSearch: data.codeSearch,
      meaningSearch: data.meaningSearch
    },
    errors: {
      400: 'Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)',
      404: 'CodeSystem not found',
      500: 'Internal Server Error due to database or implementation errors'
    }
  })
}
